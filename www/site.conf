server {
	server_name ((DOMAIN)) www.((DOMAIN));
	listen 8443 ssl http2;
	listen [::]:8443 ssl http2;
	root /var/www/https;
	include /etc/nginx/sites-available/shared-ssl.inc;

	if ($block) { # set in badagents.conf
		return 444;
	}

	if ($request_method !~ ^(HEAD|GET)$) {
		return 444;
	}

	location ~ /\.[^w]|^/+(?:_|admin|ansible|aws|backup|b[ck]|config(?:uration)?\.|debug|django|docker|ec[ps]|elastic|env(?:ironment)?\.|kubernetes|maven|parameters\.|php|telescope|travis|wordpress|wp)|credential|secret|\.(?:key|sql|ya?ml)(?:\?|$) {
		# obvious hack attempt
		include /etc/nginx/sites-available/hacker.inc;
	}

	location ~ /(?:_|wp-|php$)|^/+(?:home|main|new|old|api|about|server-status|path_sql)(?:[/?]|$)|\.(?:php\d?|ini|action|properties)(?:\?|$)|golem\.com|rest_route {
		# likely hack attempt (but could also be a well-intentioned bot following a bad link, so don't punish them)
		lingering_close off;
		return 444;
	}

	index index.htm;

	gzip_static on;

	location ~ \.gz$ {
		# prevent direct access to static gzip files
		return 404;
	}

	add_header Content-Security-Policy "base-uri 'self'; default-src 'none'; img-src 'self'; style-src 'self'; form-action 'none'; frame-ancestors 'none'" always;
	add_header Cross-Origin-Embedder-Policy "require-corp" always;
	add_header Cross-Origin-Opener-Policy "same-origin" always;
	add_header Cross-Origin-Resource-Policy "same-origin" always;
	add_header Permissions-Policy "accelerometer=(), autoplay=(), camera=(), geolocation=(), gyroscope=(), interest-cohort=(), magnetometer=(), microphone=(), payment=(), sync-xhr=(), usb=()" always;
	add_header Referrer-Policy "no-referrer" always;
	add_header X-Content-Type-Options "nosniff" always;
	add_header X-Frame-Options "DENY" always;
	add_header X-XSS-Protection "1; mode=block" always;

	# https://xclacksoverhead.org/home/about
	add_header X-Clacks-Overhead "GNU Terry Pratchett" always;

	location /security.txt { # old standardised location for security.txt
		expires max;
		return 301 /.well-known/security.txt;
	}

	location /errors/ {
		internal;
	}

	location /retro/ {
		keepalive_timeout 0s;
		access_log off;
		expires max;
		return 301 https://retro.((DOMAIN))$request_uri;
	}

	location /retros/ {
		keepalive_timeout 0s;
		access_log off;
		expires max;
		return 301 https://retro.((DOMAIN))$request_uri;
	}

	error_page 404 /errors/404.htm;
}
